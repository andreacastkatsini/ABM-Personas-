import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';

import { Person } from 'src/app/models/persona';
import { PersonaService } from 'src/app/services/persona.service';

@Component({
  selector: 'app-alta',
  templateUrl: './alta.component.html',
  styleUrls: ['./alta.component.scss']
})
export class AltaComponent implements OnInit {
  itemsToEdit!: Person;
  peopleDataForm!: FormGroup;
  // variable que define por default el nro de id de Person
  idAutoGenerated = 2;

  constructor(private formBuilder: FormBuilder, private personaService: PersonaService, private activatedRoute: ActivatedRoute) {
  }

  // Llamamos el método que va a cargar al inicio, en este caso se setea el
  // formulario para el objeto Person de alta o edicion y ademas se llama al método
  // de obtencion de objeto a editar que viene por url y lo guardamos en una
  // variable del componente 'getParams'
  ngOnInit(): void {
    this.getParams();
    this.setPersonFormGroup();
  }

// Metodo para guardar los datos del objeto
  saveForm() {
    const people: Person = {
      // if statement ternario
      id: this.itemsToEdit.id > 0 ? this.itemsToEdit.id : this.idAutoGenerated,
      Dni: this.peopleDataForm.get('dni')?.value,
      Name: this.peopleDataForm.get('name')?.value,
      Surname: this.peopleDataForm.get('surname')?.value,
      Address: this.peopleDataForm.get('address')?.value,
      Mobile: this.peopleDataForm.get('mobile')?.value,
    }
    this.peopleDataForm.reset('');

    //Edicion y creacion de nueva Person cuando pega en un endpoint

    if (this.itemsToEdit){
      // this.personaService.editPerson(people).subscribe(response => {
      //   console.log(response);
      // });
      console.log('Elemento a editar', people);
    }else {
      // this.personaService.createPerson(people).subscribe(response => {
      //   this.idAutoGenerated++;
      //   console.log(response);
      // });
      console.log('Elemento a crear', people);
    }
  }

  // Con activatedRoute traemos los parametros recibidos en los inputs (data)
  // y los guardamos en la variable itemsToEdit
  getParams(){
    this.activatedRoute.queryParams.subscribe(data =>{
      this.itemsToEdit= data as Person;
    })
  }

  // Seteamos los datos que van a llegar del formulario,
  // sirve para guardar y editar
  setPersonFormGroup() {
    this.peopleDataForm = this.formBuilder.group({
      dni: [null, Validators.required],
      name: [null, Validators.required],
      surname: [null, Validators.required],
      address: [null],
      mobile: [null]
    });
    // Si llegan datos del formulario (desde la variable itemsToEdit)
    // setearlo como setValuesForm
    if (this.itemsToEdit) {
      this.setDefaultValuesForm();
    }
  }

  // Definicion del metodo setValuesForm, se debe setear para que pueda editar
  // el objeto
  setDefaultValuesForm(){
    this.peopleDataForm.get('dni')?.setValue(this.itemsToEdit.Dni);
    this.peopleDataForm.get('name')?.setValue(this.itemsToEdit.Name);
    this.peopleDataForm.get('surname')?.setValue(this.itemsToEdit.Surname);
    this.peopleDataForm.get('address')?.setValue(this.itemsToEdit.Address);
    this.peopleDataForm.get('mobile')?.setValue(this.itemsToEdit.Mobile);
  }

}
